#spring.config.import=application_prod.properties allows you to import an additional configuration file so that the settings
#in it affect or overwrite previous settings, which is usually very useful for managing configurations of different environments.
spring.config.import=application_prod.properties
spring.profiles.active=default

spring.application.name=${SPRING_APP_NAME:SpringSecurity-1}

server.port=8081

logging.level.org.springframework.security=${SPRING_SECURITY_LOG_LEVEL:TRACE}
logging.pattern.console=${LOG_PATTERN:%green(%d{HH:mm:ss.SSS} %blue(%-5level) %red([%thread]) %cyan(%logger{15}) - %msg%n)}

#Security Config
# This part means that Spring first looks for an environment variable named SECURITY_USERNAME.
# If this environment variable exists, its value is used as the username. But if there is no such variable,
# the default value of mohammad will be used as the username.
#spring.security.user.name=${SECURITY_USERNAME:mohammad}
#spring.security.user.password=${SECURITY_PASSWORD:123456}

#Database Config
spring.datasource.url=jdbc:mysql://${DATABASE_HOST:localhost}:${DATABASE_PORT:3306}/${DATABASE_NAME:eazybank}
spring.datasource.username=${DATABASE_USERNAME:root}
spring.datasource.password=${DATABASE_PASSWORD:123456}
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.format_sql=${HIBERNATE_FORMAT_SQL:true}

#Spring Security Session Timeout
server.servlet.session.timeout=${SESSION_TIMEOUT:20m}
